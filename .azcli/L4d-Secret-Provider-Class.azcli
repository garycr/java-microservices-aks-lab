# create a SecretProviderClass
ADTENANT=$(az account show --query tenantId --output tsv)
   
cat <<EOF | kubectl apply -n spring-petclinic -f -
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kvname-user-msi
spec:
  provider: azure
  secretObjects:
  - secretName: gitpatsecret
    type: Opaque
    data: 
    - objectName: gitpat
      key: gitpat
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false" 
    clientID: $USER_ASSIGNED_CLIENT_ID 
    keyvaultName: $KEYVAULT_NAME
    cloudName: "" 
    objects: |
      array: 
        - |
          objectName: GIT-PAT
          objectType: secret   
          objectAlias: gitpat          
          objectVersion: ""  
    tenantId: $ADTENANT
EOF

# update config server yaml in the kubernetes directory
curl -o spring-petclinic-config-server.yml https://raw.githubusercontent.com/Azure-Samples/java-microservices-aks-lab/main/docs/04_lab_secrets/spring-petclinic-config-server.yml
IMAGE=${MYACR}.azurecr.io/spring-petclinic-config-server:$VERSION
sed -i "s|#image#|$IMAGE|g" spring-petclinic-config-server.yml

# update application.yml filr of the config-server java microservice, replacing the hardcoded value with the new environment variable 
password: ${GIT_PAT}

# Navigate to the root of the application and rebuild the spring-petclinic-config-server.
cd ..
mvn clean package -DskipTests -rf :spring-petclinic-config-server

#  also rebuild the container image for the config-server.
cd staging-acr
rm spring-petclinic-config-server-$VERSION.jar
cp ../spring-petclinic-config-server/target/spring-petclinic-config-server-$VERSION.jar spring-petclinic-config-server-$VERSION.jar
   
docker build -t $MYACR.azurecr.io/spring-petclinic-config-server:$VERSION --build-arg ARTIFACT_NAME=spring-petclinic-config-server-$VERSION.jar --build-arg APP_PORT=8888 --build-arg AI_JAR=ai.jar .
docker push $MYACR.azurecr.io/spring-petclinic-config-server:$VERSION

# re-apply the YAML file in your AKS cluster and wait for it to be properly up and running
cd ../kubernetes
kubectl apply -f spring-petclinic-config-server.yml 
kubectl get pods -w

# check that the secret kubernetes objects got created. In the output you will notice a _gitpatsecret_object
kubectl get secrets -n spring-petclinic
